"""
Django settings for timecapsoul project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os, base64
from datetime import timedelta
from pathlib import Path


from timecapsoul.utils import load_env, get_aws_secret
import environ
env = environ.Env()
environ.Env.read_env()

import pymysql
pymysql.install_as_MySQLdb()


BASE_DIR = Path(__file__).resolve().parent.parent


load_env()  # get credential from env file
AWS_SECRET = get_aws_secret(env('AWS_SECRET_MANAGER_NAME')) # get credential from AWS Secret Manager 

ENVIRONMENT_TYPE = env('ENVIRONMENT_TYPE')
print(f'\n Project is running in env type : {ENVIRONMENT_TYPE}')

SECRET_KEY = 'django-insecure-xv5_(#zp+y*ixeerilyq^!$2mo$q6y139znuj+jqte4k1pa=89'
ENCRYPTION_KEY = base64.b64decode("8ZqN0rj8s8asfV0nZTzPpS4wpAe6o7pFfV9s5F0qf+Q=")

if ENVIRONMENT_TYPE == 'PROD':
    DEBUG = False
else:
    DEBUG = True
    
ALLOWED_HOSTS = ["*"] 

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', 
    'django_celery_results',
    'storages',    
    'channels',   
    'corsheaders',
    'drf_spectacular',
    'rest_framework',
    'dj_rest_auth',
    'rest_framework.authtoken',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'userauth',
    'memory_room',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",  
    'allauth.account.middleware.AccountMiddleware',  
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'timecapsoul.urls'

AUTH_USER_MODEL = 'userauth.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'timecapsoul.wsgi.application'
ASGI_APPLICATION = "timecapsoul.asgi.application"

if ENVIRONMENT_TYPE == 'PROD':
    # production db config
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': AWS_SECRET['DB_NAME'],
            'USER': AWS_SECRET['DB_USER'],
            'PASSWORD': AWS_SECRET['DB_PASSWORD'],
            'HOST': AWS_SECRET['DB_HOST'],
            'PORT': '3306',
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }
    
elif ENVIRONMENT_TYPE == 'DEV':
    # local db config
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.mysql',
    #         'NAME': 'timecapsoulDBTEST',
    #         'USER': 'root',
    #         'PASSWORD': 'Test@1234',
    #         'HOST': 'localhost',
    #         'PORT': 3306,
    #         'OPTIONS': {
    #             "init_command": "SET foreign_key_checks = 0;",
    #             'charset': 'utf8mb4',
    #         },
    #     }
    # }
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'
TIME_ZONE = "Asia/Kolkata"
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
MEDIA_FILES_BUCKET = "yurayi-media"
DECRYPT_LINK_TTL_SECONDS = 300  # 5 minutes
DECRYPT_LINK_SECRET = "12345678901234567890123456789012"  # for JWT signing
# if MODE == 'PROD':
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
AWS_STORAGE_BUCKET_NAME = AWS_SECRET['AWS_STORAGE_BUCKET_NAME']
AWS_S3_REGION_NAME = AWS_SECRET['AWS_S3_REGION_NAME']
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_URL_PROTOCOL = 'https'
AWS_KMS_KEY_ID = AWS_SECRET['KMS_ARN']
AWS_KMS_REGION = AWS_SECRET['KMS_REGION']
AWS_S3_USE_SSL = True
AWS_S3_VERIFY = True
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = 'timecapsoul.utils.MediaRootS3Boto3Storage'
MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/media/'
# else:
#     STATICFILES_DIRS = [BASE_DIR / "static"]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS_ALLOWED_ORIGINS = ["http://localhost:3000", 'https://yurayi.com']

CORS_ALLOW_ALL_ORIGINS = True


REST_FRAMEWORK = {
    'DATE_FORMAT': "%d %B %Y",        # e.g. 28 July 2025
    'DATETIME_FORMAT': "%d %B %Y",    
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        "userauth.authentication.BearerJWTAuthentication",  # Our custom class

    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS =True
EMAIL_HOST_USER = AWS_SECRET['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = AWS_SECRET['EMAIL_HOST_PASSWORD']

SPECTACULAR_SETTINGS = {
    'TITLE': 'Time CapSoul API',
    'DESCRIPTION': 'API documentation for time capsoul.',
    'VERSION': '1.0.0',
    'COMPONENT_SPLIT_REQUEST': True,
}

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"

GOOGLE_OAUTH_CLIENT_ID = AWS_SECRET['GOOGLE_OAUTH_CLIENT_ID']
GOOGLE_OAUTH_CLIENT_SECRET = AWS_SECRET["GOOGLE_OAUTH_CLIENT_SECRET"]
GOOGLE_OAUTH_CALLBACK_URL = AWS_SECRET["GOOGLE_OAUTH_CALLBACK_URL"]

SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": GOOGLE_OAUTH_CLIENT_ID,
                "secret": GOOGLE_OAUTH_CLIENT_SECRET,
                "key": "",
            },
        ],
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

SOCIALACCOUNT_ADAPTER = "userauth.apis.helpers.google_adapter.CustomSocialAccountAdapter"

REST_USE_JWT = True


DJRESTAUTH_TOKEN_MODEL = None

FRONTEND_URL = env('FRONTEND_URL')

print(FRONTEND_URL)

REST_AUTH = {
    "USE_JWT": True,
    "PASSWORD_RESET_CONFIRM_URL": "reset-password/{uid}/{token}/",
    "SEND_PASSWORD_RESET_EMAIL": True,
    "SIGNUP_FIELDS": {
        "username": {"required": True},
        "email": {"required": True},
    }
}


# Redis setup for channels layer
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1 GB
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour

SITE_LIVE_URL = env('SITE_LIVE_URL')

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
SESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' for cross-origin
SESSION_COOKIE_SECURE = True  # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'   # or 'None' for cross-origin
CSRF_COOKIE_SECURE = True 

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT", "Bearer"),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),   # keep session alive 7 days
    "REFRESH_TOKEN_LIFETIME": timedelta(days=15),

    "AUTH_COOKIE": "access",          # Cookie name
    "AUTH_COOKIE_SECURE": False,      # True in prod
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_SAMESITE": "Lax",
}

ACCESS_TOKEN_TTL_MINUTES = 15
REFRESH_TOKEN_TTL_DAYS = 30
JWT_SECRET = SECRET_KEY
JWT_ALGORITHM = "HS256"
JWT_ISSUER = "secure_auth"

COOKIE_DOMAIN = None  # set to  domain in prod
REFRESH_COOKIE_NAME = "refresh_token"
REFRESH_COOKIE_SAMESITE = "None"
REFRESH_COOKIE_SECURE = not DEBUG
REFRESH_COOKIE_HTTPONLY = True
REFRESH_COOKIE_PATH = "/"

# Access token cookie
ACCESS_COOKIE_NAME = "access_token"
ACCESS_COOKIE_SECURE = True          # True in production (HTTPS), False for local dev
ACCESS_COOKIE_HTTPONLY = True        # Prevent JS access (XSS protection)
ACCESS_COOKIE_SAMESITE = "None"      # "Strict" | "Lax" | "None"
ACCESS_COOKIE_PATH = "/"

# ACCESS_TOKEN_LIFETIME = 60 * 15      # 15 minutes (example)
ACCESS_TOKEN_LIFETIME = 60 * 60 * 24 * 7  # 7 days
# Refresh token cookie
REFRESH_COOKIE_NAME = "refresh_token"
REFRESH_COOKIE_SECURE = True
REFRESH_COOKIE_HTTPONLY = True
REFRESH_COOKIE_SAMESITE = "None"
# REFRESH_COOKIE_PATH = "/auth/refresh/"
REFRESH_TTL_DAYS = 7


CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://yurayi.com",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://yurayi.com"
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': BASE_DIR / 'django_cache',
        'TIMEOUT': 60 * 5,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Celery settings
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Kolkata"
CELERY_CACHE_BACKEND = "default"
CELERY_RESULT_BACKEND = "django-db"  # store task results in DB
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


import urllib.parse
from kombu import Queue

if ENVIRONMENT_TYPE == "PROD":
    aws_secret_escaped = urllib.parse.quote(AWS_SECRET_ACCESS_KEY, safe='')  # encode all special chars
    CELERY_BROKER_URL = f"sqs://{AWS_ACCESS_KEY_ID}:{aws_secret_escaped}@"
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        "region": AWS_S3_REGION_NAME,   
        "visibility_timeout": 3600,     # 1 hour
        "polling_interval": 1,
        "queue_name_prefix": "timecapsoul-",  # optional
    }

    CELERY_TASK_DEFAULT_QUEUE = "yurayi-prod-queue"
    CELERY_TASK_QUEUES = (
        Queue("yurayi-prod-queue"),
    )

elif ENVIRONMENT_TYPE == 'DEV':
    CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"

