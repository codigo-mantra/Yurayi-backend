"""
Django settings for timecapsoul project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path


from timecapsoul.utils import load_env, get_aws_secret
import environ
env = environ.Env()
environ.Env.read_env()

import pymysql
pymysql.install_as_MySQLdb()


BASE_DIR = Path(__file__).resolve().parent.parent


load_env()  # get credential from env file
AWS_SECRET = get_aws_secret(env('AWS_SECRET_MANAGER_NAME')) # get credential from AWS Secret Manager 

MODE = env('MODE')
print(f'\n Project is running in : {MODE}')

SECRET_KEY = 'django-insecure-xv5_(#zp+y*ixeerilyq^!$2mo$q6y139znuj+jqte4k1pa=89'

DEBUG = True

ALLOWED_HOSTS = ["*"] 

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', 
    'storages',    
    'channels',   
    'corsheaders',
    'drf_spectacular',
    'rest_framework',
    'dj_rest_auth',
    'rest_framework.authtoken',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'userauth',
    'memory_room',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",  
    'allauth.account.middleware.AccountMiddleware',  
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'timecapsoul.urls'

AUTH_USER_MODEL = 'userauth.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'timecapsoul.wsgi.application'
ASGI_APPLICATION = "timecapsoul.asgi.application"

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# local db config
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'timecapsoulDBTEST',
#         'USER': 'root',
#         'PASSWORD': 'Test@1234',
#         'HOST': 'localhost',
#         'PORT': 3306,
#         'OPTIONS': {
#             "init_command": "SET foreign_key_checks = 0;",
#             'charset': 'utf8mb4',
#         },
#     }
# }

# production db config
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': AWS_SECRET['DB_NAME'],
        'USER': AWS_SECRET['DB_USER'],
        'PASSWORD': AWS_SECRET['DB_PASSWORD'],
        'HOST': AWS_SECRET['DB_HOST'],
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
if MODE == 'PROD':
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    AWS_STORAGE_BUCKET_NAME = AWS_SECRET['AWS_STORAGE_BUCKET_NAME']
    AWS_S3_REGION_NAME = AWS_SECRET['AWS_S3_REGION_NAME']
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_URL_PROTOCOL = 'https'
    AWS_S3_USE_SSL = True
    AWS_S3_VERIFY = True
    AWS_DEFAULT_ACL = None
    DEFAULT_FILE_STORAGE = 'timecapsoul.utils.MediaRootS3Boto3Storage'
    MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/media/'
else:
    STATICFILES_DIRS = [BASE_DIR / "static"]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = ["http://localhost:3000", 'https://yurayi.com']

CORS_ALLOW_ALL_ORIGINS = True


REST_FRAMEWORK = {
    'DATE_FORMAT': "%d %B %Y",        # e.g. 28 July 2025
    'DATETIME_FORMAT': "%d %B %Y",    
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS =True
EMAIL_HOST_USER = AWS_SECRET['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = AWS_SECRET['EMAIL_HOST_PASSWORD']

SPECTACULAR_SETTINGS = {
    'TITLE': 'Time CapSoul API',
    'DESCRIPTION': 'API documentation for time capsoul.',
    'VERSION': '1.0.0',
    'COMPONENT_SPLIT_REQUEST': True,
}

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"

GOOGLE_OAUTH_CLIENT_ID = AWS_SECRET['GOOGLE_OAUTH_CLIENT_ID']
GOOGLE_OAUTH_CLIENT_SECRET = AWS_SECRET["GOOGLE_OAUTH_CLIENT_SECRET"]
GOOGLE_OAUTH_CALLBACK_URL = AWS_SECRET["GOOGLE_OAUTH_CALLBACK_URL"]

SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APPS": [
            {
                "client_id": GOOGLE_OAUTH_CLIENT_ID,
                "secret": GOOGLE_OAUTH_CLIENT_SECRET,
                "key": "",
            },
        ],
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

SOCIALACCOUNT_ADAPTER = "userauth.apis.helpers.google_adapter.CustomSocialAccountAdapter"

REST_USE_JWT = True

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT', 'Bearer'),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

DJRESTAUTH_TOKEN_MODEL = None

FRONTEND_URL = env('FRONTEND_URL')

print(FRONTEND_URL)

REST_AUTH = {
    "USE_JWT": True,
    "PASSWORD_RESET_CONFIRM_URL": "reset-password/{uid}/{token}/",
    "SEND_PASSWORD_RESET_EMAIL": True,
    "SIGNUP_FIELDS": {
        "username": {"required": True},
        "email": {"required": True},
    }
}


# Redis setup for channels layer
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1 GB
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour

